-- how to elaborate: elabzoo-holes elab < example.txt
-- or in emacs shell: cat example.txt | elabzoo-holes elab

let id : (A : _) -> A -> A
    = \A x. x in
let List : U -> U
    = \A. (L : _) -> (A -> L -> L) -> L -> L in
let nil : (A : _) -> List A
    = \A L cons nil. nil in
let cons : (A : _) -> A -> List A -> List A
    = \A x xs L cons nil. cons x (xs _ cons nil) in
let Bool : U
    = (B : _) -> B -> B -> B in
let true : Bool
    = \B t f. t in
let false : Bool
    = \B t f. f in
let not : Bool -> Bool
    = \b B t f. b B f t in
let list1 : List Bool
    = cons _ (id _ true) (nil _) in
let Eq : (A : _) -> A -> A -> U
    = \A x y. (P : A -> U) -> P x -> P y in
let refl : (A : _)(x : A) -> Eq A x x
    = \A x P px. px in

\x. refl _ (cons _ true x)
