
This file contains a bit more formal account of pattern unification. I will not
treat metavariables and metacontexts in a formal way, so the occurs check
condition is only given as a (hopefully obvious) afterthought. I will omit
several proofs of stated properties.

We assume that the syntax of the type theory is given by an initial
category-with-families with some (unspecified) type formers.

  - We use Γ,Δ for contexts
  - We use σ,δ for substitutions, and write Sub Γ Δ for a set of substitutions.
  - We use A, B, C for types and t, u, v for terms.
  - ∙ is the empty context
  - Γ, A  is an extended context, or alternatively  Γ, x : A
  - _∘_ is substitution composition, id is identity substitution
  - A[σ] is type substitution
  - t[σ] is term substitution
  - We write (Γ ⊢ A) if A is a type in Γ
  - We write (Γ ⊢ t : A) if t is a term in Γ with type A

-- Epimorphisms
--------------------------------------------------------------------------------

We refine the usual categorical definition of epimorphisms:

  σ : Sub Γ Δ is epi iff
    - δ ∘ σ = δ' ∘ σ  implies δ = δ'
    - A[σ] = A'[σ]    implies A = A'

The condition on terms, saying that t[σ] = t'[σ] implies t = t', is derivable from
the above. For monomorphisms, the usual definition suffices.

-- Renamings
--------------------------------------------------------------------------------

A substitution σ : Sub Γ Δ is a renaming if it is given as list of variables. We
write σ : Ren Γ Δ for renamings. Renamings are generated by:

  - ε   : Sub Γ ∙
  - _,_ : (σ : Sub Γ Δ) → Var Γ (A[σ]) → Sub Γ (Δ, A)

where Var Γ (A[σ]) denotes a set of variables

Properties:

  - Renamings are a wide subcategory of substitutions.
  - A renaming σ : Ren Γ Δ is epi iff it uses each Γ variable at most once.
  - A renaming σ : Ren Γ Δ is mono iff it uses each Γ variable at least once.
  - Renamings which are both mono and epi are isomorphisms (context permutations)


-- Embeddings
--------------------------------------------------------------------------------

A substitution σ : Sub Γ Δ is an embedding if it's generated by the following
operations:

  - ε    : Sub Γ ∙
  - drop : Sub Γ Δ → Sub (Γ, A) Δ
  - keep : (σ : Sub Γ Δ) → Sub (Γ, A[σ]) (Δ, A)

We denote an embedding as σ : Γ ⊇ Δ. Intuitively, this means that Δ is given
by dropping zero or more entries from Γ, or that Δ can be embedded into Γ.

Properties:

  - Embeddings form a wide subcategory of renamings.
  - Every embedding is epi.
  - The only embedding σ : Γ ⊆ Γ is the identity embedding.


-- Factorization of renamings
--------------------------------------------------------------------------------

Every σ : Ren Γ Δ uniquely factorizes as follows:

  - σᵐ ∘ σᵉ = σ
  - σᵐ : Ren Γ' Δ is mono
  - σᵉ : Γ ⊇ Γ'

This can be viewed as strengthening for renamings. The σᵉ specifies which Γ vars
are actually used, and σᵐ is the action of renaming, which uses all specified Γ' vars.


-- Strengthening for types and terms
--------------------------------------------------------------------------------

Given Γ ⊢ t : A and σ : Γ ⊇ Δ, it is decidable whether t', A' exist such that
t = t'[σ] and A = A'[σ]. Moreover, since σ is epi, t' and A' are unique.


-- Pattern unification
--------------------------------------------------------------------------------

We have the following unification problem

  Γ ⊢ ?α [spine] =? rhs

where

  Δ ⊢ ?α : A
  spine : Sub Γ Δ
  Γ ⊢ rhs : A[spine]

For simplicity, we view ?α as depending on the Δ context, while in the actual
implementation it has a closed iterated function type, with arguments specified
by Δ. The difference is not essential; we use the current presentation to skip
handling iterated function types and telescopes.

The pattern condition says the following:

  - spine is a renaming and an epi, with factorization spineᵐ ∘ spineᵉ
  - rhs = rhs'[spineᵉ]
  - α is not free in rhs

Since spine is epi, spineᵐ is also an epi and thus an iso, with inverse spineᵐ⁻¹.

Now, we can simply rearrange the equation:

   ?α [spine]             =? rhs
   ?α [spineᵐ ∘ spineᵉ]   =? rhs'[spineᵉ]     -- by pattern condition
   ?α [spineᵐ]            =? rhs'             -- spineᵉ is epi
   ?α [spineᵐ ∘ spineᵐ⁻¹] =? rhs'[spineᵐ⁻¹]
   ?α                     =? rhs'[spineᵐ⁻¹]

To introduce the definition (?α := rhs'[spineᵐ⁻¹]) to the metacontext, it only remains
to check that ?α is not free in the solution. That's because in a formal presentation,
the metacontext is an ordered "modal" context, and solutions cannot depend on the solved
variable. See this for details:

  https://dl.acm.org/doi/10.1145/3408983

We only give an informal argument here:

  - α is not free in rhs by assumption
  - hence α is not free in rhs'
  - spineᵐ⁻¹ is a permutation of non-meta variables
  - hence α is not free in rhs'[spineᵐ⁻¹]


-- Uniqueness and decidability of the solution
--------------------------------------------------------------------------------

The following are all decidable:
  - whether a renaming is epi
  - factorizing renamings
  - strengthening

Hence pattern unification is decidable. Since factorization and strengthening is also unique,
the solution is unique as well.

Remark:
  - term/type strengthening is only decidable if the type theory is normalizing.
  - deciding epi-ness and factorization for renamings is always possible
