-- how to elaborate: elabzoo-implicit-args elab < example.txt
-- or in emacs shell: cat example.txt | elabzoo-implicit-args elab

let id : {A} -> A -> A = \x. x in

-- by default metas are inserted for implicit arguments but
-- (!) can be used to stop insertion at any point. The (id!) expression
--  has a polymorphic type {A} → A → A
let id2 : {A} → A → A = id (id!) in

let const : {A B} -> A -> B -> A
    = \x y. x in

-- definition types can be omitted
let constTy = {A B} → A → B → A in

-- explicit id function used for annotation as in Idris
let the : (A : _) -> A -> A = \_ x. x in

-- implicit application follows Agda convention.
let namedArgTest = const {B = U} U in
let namedArgTest2 = the constTy (λ x y. x) {B = U} U in

-- bool
let Bool : U
    = (B : _) -> B -> B -> B in
let true : Bool
    = \B t f. t in
let false : Bool
    = \B t f. f in
let not : Bool -> Bool
    = \b B t f. b B f t in

-- lists
let List : U -> U
    = \A. (L : _) -> (A -> L -> L) -> L -> L in
let nil : {A} -> List A
    = \L cons nil. nil in
let cons : {A} -> A -> List A -> List A
    = \x xs L cons nil. cons x (xs L cons nil) in
let map : {A B} -> (A -> B) -> List A -> List B
    = \{A}{B} f xs L c n. xs L (\a. c (f a)) n in
let list1 : List Bool
    = cons true (cons false (cons true nil)) in

-- using ! when mapping over lists
-- idlist has type List ({A} -> A -> A)
let idlist = map (const (id!)) list1 in

-- dependent function composition
let comp : {A}{B : A -> U}{C : {a} -> B a -> U}
           (f : {a}(b : B a) -> C b)
           (g : (a : A) -> B a)
           (a : A)
           -> C (g a)
    = \f g a. f (g a) in

let compExample = comp (cons true) (cons false) nil in

-- nat
let Nat : U
    = (N : U) -> (N -> N) -> N -> N in
let mul : Nat -> Nat -> Nat
    = \a b N s z. a _ (b _ s) z in
let ten : Nat
    = \N s z. s (s (s (s (s (s (s (s (s (s z))))))))) in
let hundred = mul ten ten in

-- Leibniz equality
let Eq : {A} -> A -> A -> U
    = \{A} x y. (P : A -> U) -> P x -> P y in
let refl : {A}{x : A} -> Eq x x
    = \_ px. px in

the (Eq (mul ten ten) hundred) refl
