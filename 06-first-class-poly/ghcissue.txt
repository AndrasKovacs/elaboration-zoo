
-- https://gitlab.haskell.org/ghc/ghc/-/issues/21925
-- usage:   cat ghcissue.txt | elabzoo-first-class-poly elab

-- lib (Bool + propositional equality)
------------------------------------------------------------

let Type = U;

let Bool = (B : U) → B → B → B;

let true  : Bool = λ _ t f. t;
let false : Bool = λ _ t f. f;

let ifThenElse : {A} → Bool → A → A → A
  = λ b. b _;

let Eq : {A} → A → A → Type
  = λ {A} x y. (P : A → Type) → P x → P y;

let refl : {A x} → Eq {A} x x
  = λ p px. px;

------------------------------------------------------------

let Iddy : Bool -> Type -> Type
  = \b a. ifThenElse b a a;

-- unknown Bool value (metavariable)
let myBool : Bool = _;

-- the checking of "\x. x" is blocked because
--   1. the checking type is blocked on myBool
--   2. elaboration behaves differently when the checking type is a canonical `forall` because
--      in that case it knows that an implicit type lambda has to be inserted.
let myId : Iddy myBool ({A:Type} -> A -> A)
  = \x. x;

-- we solve myBool
let myBoolIsTrue : Eq {Bool} true myBool
  = refl;

-- when myBool is solved, we immediately resume checking myId,
-- and it's elaborated to \{A:Type}(x:A). x

let foo : Bool
  = myId true;

------------------------------------------------------------
U
