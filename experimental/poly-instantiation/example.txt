
-- usage e.g : cat example.txt | elabzoo-poly-instantiation elab

-- Here I am reproducing a bunch of examples from Figure 2 in the
-- "Guarded Impredicative Polymorphism" paper:
--   https://www.microsoft.com/en-us/research/uploads/prod/2017/07/impredicative-pldi18.pdf

-- A couple of examples don't type check here, because we don't (yet) support pruning
-- for metas. However, pruning is orthogonal to the "telescope" inference
-- demonstrated here, and it could be added to this system without issue.

-- In some cases we get unsolved metas, which is because we don't support let generalization,
-- so the dangling stuff just remains there.

-- In the elaboration output, telescopes are not computed away, because I haven't yet
-- implemented a version of "zonking" which computes them. Nonetheless, you can observe
-- that known telescopes disappear during normalization.

let the	   : (A : U) → A → A = λ A x.x in
let id	   : {A} → A → A = λ x. x in
let const  : {A B} → A → B → A = λ x y. x in
let choose : {A} → A → A → A = λ x y. x in

let Nat  : U = (N : U) → (N → N) → N → N in
let zero : Nat = λ _ s z. z in
let inc  : Nat → Nat = λ n _ s z. s (n _ s z) in

let mul : Nat → Nat → Nat
    = λ a b N s z. a _ (b _ s) z in
let ten : Nat
    = λ N s z. s (s (s (s (s (s (s (s (s (s z))))))))) in

let hundred = mul ten ten in

let List : U → U
    = λA. (L : _) → (A → L → L) → L → L in
let nil : {A} → List A
    = λcons L nil. nil in
let cons : {A} → A → List A → List A
    = λ{A} x xs L cons nil. cons x (xs _ cons nil) in
let append : {A} → List A → List A → List A
    = λ xs ys L cons nil. xs _ cons (ys _ cons nil) in
let map  : {A B} → (A → B) → List A → List B
    = λ f as _ c n. as _ (λ a. c (f a)) n in
let head : {A} → List A → A
    = λ as. _ in

let single : {A} → A → List A = λ a L cons nil. cons a nil in
let length : {A} → List A → Nat = λ as _ s z. as _ (λ _.s) z in

let Pair = λ A B. (P : U) → (A → B → P) → P in
let pair : {A B} → A → B → Pair A B = λ x y _ p. p x y in
let fst  : {A B} → Pair A B → A = λ p. p _ (λ x y. x) in
let snd  : {A B} → Pair A B → B = λ p. p _ (λ x y. y) in

let Bool : U
    = {B} → B → B → B in
let true : Bool
    = λt f. t in
let false : Bool
    = λt f. f in
let not : Bool → Bool
   = λ b t f. b f t in

let poly : ({A} → A → A) → Pair Nat Bool = λ f. pair (f zero) (f true) in
let auto : ({A} → A → A) → ({A} → A → A) = id in
let app  : {A B} → (A → B) → A → B = λ f a. f a in
let revapp : {A B} → A → (A → B) → B = λ a f. f a in

let IdTy : U = {A} → A → A in
let id2 = λ x. x in
let ids : List IdTy = cons id2 (cons (λx.x) nil) in
let ids2 : List IdTy = map (const id) ids in

let l1 = cons true (cons false nil) in
let l2 : List Bool = nil in
let l3 = append l1 l2 in

let ST : U → U → U = λ A B. A → B in
let runST : {A} → ({S} → ST S A) → A = _ in
let argST : {S} → ST S Nat = _ in

let const2 = λ x y. x in
let l = cons const2 (nil {{A B} → A → B → A}) in

let t1 = choose nil ids in
-- let t2 = λ (x : IdTy). x x in  -- we need pruning
let t3 = poly id in
let t4 = id poly (λ x. x) in

-- let t5 = λ xs. poly (head xs) in -- we need pruning
let t6 = length ids in
let t7 = append (single inc) (single id) in
let t8 : ({A} → List A → List A → A) → _ = λ g. g (single id) ids in
let t9  = map poly (single id) in
let t10 = map head (single ids) in

let t11 = app poly id in
let t12 = revapp id poly in
let t13 = app runST argST in
let t14 : ({A} → A → {B} → B → B) → _ = λ r. r (λ x y. y) in

U
