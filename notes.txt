
PRIOR ART:

  - Coquand's algorithm:
      www.cse.chalmers.se/~coquand/type.ps
  - Chapman's thesis chapter 2:
      https://jmchapman.github.io/papers/thesis.pdf
  - Larry Diehl:
      "Expressionless Weak-Head normal forms" : http://www.larrytheliquid.com/
  - Epigram reloaded:
      http://www.cs.nott.ac.uk/~psztxa/publ/checking.pdf

- First-order closures for Val-s seem the best idea (Larry Diehl: "reduction via environment machines")
- Unfolding and rewrites on closures
- How to infer unreduced Term and Type at the same time ("Glued" representation, e. g. in Epigram Reloaded)
- Globals vs locals (scope closures everywhere a good idea?)

- Problem to solve: find "common ancestral" closure of two arbitrary closures
  - Necessary for lots of operations on unreduced terms in closures.
  - most simply: in the case of de Bruijn levels
    - We can get a 8 size closure by applying 4 arguments to a function in 4-size closure
      or by having a value in a 8-size closure - how do we know which variable points to common environment?
    - How can we systematically record ancestry/inclusion of environments?
    - Unsatisfactory solutions:
      - 1. Only work with whnf or nf. In this case, resolving substitutions eliminates closure dependency and ambiguity.
        - Why not good: we'd like to avoid unfolding when possible
      - 2. Assume a special immutable environment with unambiguous references within type checking scope ("top level constants")
           "Top level" references are unambiguous, therefore can be used in unfolded state. This strategy is probably employed by
            real-world type checkers to some degree.
        - Why not good:
          - we should try solving the most general case first and see if there's something to be learned
      - 3. Extend de Bruijn indices to de Bruijn "path"-s (or: globally unique names of binders with "path" structure)
           which lets us decide whether any two var points to the same context entry
           - problem: could be slow and/or unwieldy
           - worth a look though

    - Dirty solution:
       semidecide equality of unreduced references by unsafePtrEquality of context entries:
       if yes, then hurray!, if no, then unfold and recheck
         - actually, this seems to be pretty nifty to me!
         - For pretty printing and reporting we don't need to know anything about env structure, we can just use
           the names we have.
         - Unreduced reference equality is "just" an optimization, and for that ptr equality is morally okay.

Closures: what should they contain:
  - Option 1: only the vars that are free in the inner term
    - Pros : small closures
    - Cons : or maybe not; we have good sharing if our closures are big and all-encompassing
             and mostly the same, and bad sharing if we custom-tailor each closure
  - Option 2: closures always contain all lexically visible bindings

  - Lazy loading? Suppose a module exports a single public function which references tons of private
    names in its body. We wouldn't want to load everything transitively, or do we? 


